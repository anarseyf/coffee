{"version":3,"sources":["components/kitchensink.module.css","logo.svg","maps/CoffeeMap.jsx","components/Chart.jsx","components/DataTable.tsx","components/Scatterplot.jsx","components/logic.tsx","components/KitchenSink.jsx","App.jsx","serviceWorker.js","index.tsx"],"names":["module","exports","coordinates","CoffeeMap","options","url","ext","accessToken","attribution","center","zoom","TileLayer","Marker","position","Popup","React","Component","vegaSpec","$schema","width","height","mark","encoding","x","field","type","y","data","name","vegaData","table","a","b","Chart","VegaLite","spec","DataTable","props","Table","size","bordered","hover","variant","map","d","key","incident_number","align","color","JSON","stringify","frameProps","points","theaterCount","rank","grossWeekly","title","margin","left","bottom","right","top","xAccessor","yAccessor","yExtent","xExtent","pointStyle","r","fill","axes","orient","label","styles","semiotic","getByAPI","api","fetch","headers","Accept","response","json","KitchenSink","useState","address","datetime","latitude","longitude","setData","Scatterplot","Button","className","button","onClick","getEnv","then","NODE_ENV","catch","error","getSeattle911","console","log","App","Navbar","bg","Nav","Link","to","src","logo","alt","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.a0684e3f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"kitchensink_button__3nXhL\"};","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\nimport { Map as LeafletMap, TileLayer, Marker, Popup } from \"react-leaflet\";\n// import styles from \"./map.module.css\";\nimport \"./styles.css\";\n// import \"../../../node_modules/leaflet/dist/leaflet.css\";\n\nconst coordinates = [47.6, -122.32];\nconst zoom = 11;\n\nexport class CoffeeMap extends React.Component {\n    render() {\n        const options = {\n            url:\n                \"https://stamen-tiles-{s}.a.ssl.fastly.net/toner/{z}/{x}/{y}.{ext}\",\n            ext: \"png\",\n            accessToken:\n                \"pk.eyJ1IjoiYW5hcnNleWYiLCJhIjoiY2thZXlra3llMGF4MDJ4cXYzY2ZkamVkdyJ9.K8CENC0jz2D0O6ziL_jnNg\", // Mapbox: 'coffee' token\n            attribution:\n                'Map tiles by <a href=\"http://stamen.com\">Stamen</a>, <a href=\"http://creativecommons.org/licenses/by/3.0\">CC BY 3.0</a> &mdash; Map data &copy; <a href=\"http://www.openstreetmap.org/copyright\">OpenStreetMap</a>',\n        };\n        return (\n            <LeafletMap center={coordinates} zoom={zoom}>\n                <TileLayer {...options} />\n                <Marker position={coordinates}>\n                    <Popup>\n                        A pretty CSS3 popup. <br /> Easily customizable.\n                    </Popup>\n                </Marker>\n            </LeafletMap>\n        );\n    }\n}\n","import React from \"react\";\nimport { VegaLite } from \"react-vega\";\n\nconst vegaSpec = {\n    $schema: \"https://vega.github.io/schema/vega-lite/v4.json\",\n    width: 200,\n    height: 50,\n    mark: \"circle\",\n\n    encoding: {\n        x: { field: \"a\", type: \"ordinal\" },\n        y: { field: \"b\", type: \"quantitative\" },\n    },\n\n    data: { name: \"table\" },\n};\n\nconst vegaData = {\n    table: [\n        { a: \"A\", b: 28 },\n        { a: \"B\", b: 55 },\n        { a: \"C\", b: 43 },\n        { a: \"D\", b: 91 },\n        { a: \"E\", b: 81 },\n        { a: \"F\", b: 53 },\n        { a: \"G\", b: 19 },\n        { a: \"H\", b: 87 },\n        { a: \"I\", b: 52 },\n    ],\n};\n\nexport function Chart() {\n    return <VegaLite spec={vegaSpec} data={vegaData}></VegaLite>;\n}\n","import React from \"react\";\nimport Table from \"react-bootstrap/Table\";\n\ntype Props = {\n    data: any[];\n};\n\nexport function DataTable(props: Props) {\n    return (\n        <Table size=\"sm\" bordered hover variant=\"dark\">\n            <tbody>\n                {props.data.map((d) => (\n                    <tr key={d.incident_number}>\n                        <td align=\"left\" color=\"white\">\n                            <pre>{JSON.stringify(d, null, 2)}</pre>\n                        </td>\n                    </tr>\n                ))}\n            </tbody>\n        </Table>\n    );\n}\n","import React from \"react\";\nimport { XYFrame } from \"semiotic\";\nimport styles from \"./visual.css\";\n\nconst frameProps = {\n    /* --- Data --- */\n    points: [\n        { theaterCount: 4, rank: 18, grossWeekly: 327616, title: \"Ex Machina\" },\n        {\n            theaterCount: 39,\n            rank: 15,\n            grossWeekly: 1150814,\n            title: \"Far from the Madding Crowd\",\n        },\n    ],\n\n    /* --- Size --- */\n    size: [400, 200],\n    margin: { left: 10, bottom: 10, right: 10, top: 10 },\n\n    /* --- Process --- */\n    xAccessor: \"theaterCount\",\n    yAccessor: \"rank\",\n    yExtent: [0],\n    xExtent: [0],\n\n    /* --- Customize --- */\n    pointStyle: (d) => {\n        return {\n            r: 5,\n            fill:\n                d.title === \"Ex Machina\"\n                    ? \"#ac58e5\"\n                    : d.title === \"Far from the Madding Crowd\"\n                    ? \"#E0488B\"\n                    : \"#9fd0cb\",\n        };\n    },\n    axes: [\n        { orient: \"left\", label: \"Rank\" },\n        { orient: \"bottom\", label: { name: \"Theaters\" } },\n    ],\n};\n\nexport default () => {\n    return <XYFrame styles={styles.semiotic} {...frameProps} />;\n};\n","export async function getEnv() {\n    return getByAPI(\"env\");\n}\n\nexport async function getSeattle911() {\n    return getByAPI(\"seattle911\");\n}\n\nasync function getByAPI(api = \"\") {\n    const response = await fetch(`/api/${api}`, {\n        headers: { Accept: \"application-json\" },\n    });\n\n    return response.json();\n}\n","import React, { useState } from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport { Chart } from \"./Chart\";\nimport { DataTable } from \"./DataTable\";\nimport Scatterplot from \"./Scatterplot\";\nimport { getEnv, getSeattle911 } from \"./logic\";\nimport styles from \"./kitchensink.module.css\";\n\nexport function KitchenSink() {\n    const initialData = [\n        {\n            address: \"15TH AV E / E REPUBLICAN ST\",\n            type: \"Aid Response\",\n            datetime: \"2019-11-23T15:41:00.000\",\n            latitude: \"47.623102\",\n            longitude: \"-122.312631\",\n            incident_number: \"F0001\",\n        },\n    ];\n\n    const [data, setData] = useState(initialData);\n\n    function updateEnv() {\n        getEnv()\n            .then((data) =>\n                setData([\n                    {\n                        NODE_ENV: data.NODE_ENV,\n                    },\n                ])\n            )\n            .catch((error) => setData([{ error }]));\n    }\n\n    function updateData() {\n        getSeattle911()\n            .then((data) => {\n                console.log(\"Data from API: \", data);\n                setData(data);\n            })\n            .catch((error) => setData([{ error }]));\n    }\n\n    return (\n        <>\n            <Chart></Chart>\n            <Scatterplot></Scatterplot>\n            <Button\n                variant=\"danger\"\n                className={`${styles.button} m-2`}\n                onClick={updateEnv}\n            >\n                Get env\n            </Button>\n            <Button\n                className={`${styles.button} m-2`}\n                variant=\"danger\"\n                onClick={updateData}\n            >\n                Get data\n            </Button>\n            <DataTable data={data}></DataTable>\n        </>\n    );\n}\n","import React from \"react\";\nimport { Router, Link } from \"@reach/router\";\nimport Nav from \"react-bootstrap/Nav\";\nimport Navbar from \"react-bootstrap/Navbar\";\n\nimport { CoffeeMap } from \"./maps/CoffeeMap\";\nimport { KitchenSink } from \"./components/KitchenSink\";\n\nimport \"./App.css\";\nimport logo from \"./logo.svg\";\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <Navbar bg=\"dark\" className=\"text-center\">\n                <Nav>\n                    <Nav.Link>\n                        <Link to=\"/\">Home</Link>\n                    </Nav.Link>\n                    <Nav.Link>\n                        <Link to=\"/map\">Map</Link>\n                    </Nav.Link>\n                    <Nav.Link>\n                        <Link to=\"/kitchensink\">Charts</Link>\n                    </Nav.Link>\n                </Nav>\n            </Navbar>\n            <img src={logo} className=\"App-logo\" alt=\"logo\" />\n            <Router>\n                <CoffeeMap path=\"/map\"></CoffeeMap>\n                <KitchenSink path=\"/kitchensink\"></KitchenSink>\n            </Router>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === \"localhost\" ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === \"[::1]\" ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n        )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener(\"load\", () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        \"This web app is being served cache-first by a service \" +\n                            \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === \"installed\") {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                \"New content is available and will be used when all \" +\n                                    \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log(\"Content is cached for offline use.\");\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch((error) => {\n            console.error(\"Error during service worker registration:\", error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { \"Service-Worker\": \"script\" },\n    })\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get(\"content-type\");\n            if (\n                response.status === 404 ||\n                (contentType != null &&\n                    contentType.indexOf(\"javascript\") === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                \"No internet connection found. App is running in offline mode.\"\n            );\n        });\n}\n\nexport function unregister() {\n    if (\"serviceWorker\" in navigator) {\n        navigator.serviceWorker.ready\n            .then((registration) => {\n                registration.unregister();\n            })\n            .catch((error) => {\n                console.error(error.message);\n            });\n    }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./custom.scss\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}