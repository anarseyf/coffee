{"version":3,"sources":["logic.tsx","Chart.jsx","DataTable.tsx","App.tsx","serviceWorker.tsx","index.tsx","app.module.css","logo.svg"],"names":["a","getByAPI","api","fetch","headers","Accept","response","json","vegaSpec","width","height","mark","encoding","x","field","type","y","data","name","vegaData","table","b","Chart","VegaLite","spec","DataTable","props","Table","size","bordered","hover","variant","map","d","align","color","JSON","stringify","App","useState","address","datetime","latitude","longitude","setData","className","src","logo","alt","Button","styles","button","onClick","getEnv","then","NODE_ENV","catch","error","getSeattle911","console","log","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message","module","exports"],"mappings":"kRAAO,sBAAAA,EAAA,+EACEC,EAAS,QADX,4C,kEAIA,sBAAAD,EAAA,+EACEC,EAAS,eADX,4C,+BAIQA,I,2EAAf,0CAAAD,EAAA,6DAAwBE,EAAxB,+BAA8B,GAA9B,SACyBC,MAAM,QAAD,OAASD,GAAO,CAC1CE,QAAS,CAAEC,OAAQ,sBAFvB,cACQC,EADR,yBAKSA,EAASC,QALlB,4C,mCCLMC,EAAW,CACfC,MAAO,IACPC,OAAQ,GACRC,KAAM,SACNC,SAAU,CACRC,EAAG,CAAEC,MAAO,IAAKC,KAAM,WACvBC,EAAG,CAAEF,MAAO,IAAKC,KAAM,iBAEzBE,KAAM,CAAEC,KAAM,UAGVC,EAAW,CACfC,MAAO,CACL,CAAEpB,EAAG,IAAKqB,EAAG,IACb,CAAErB,EAAG,IAAKqB,EAAG,IACb,CAAErB,EAAG,IAAKqB,EAAG,IACb,CAAErB,EAAG,IAAKqB,EAAG,IACb,CAAErB,EAAG,IAAKqB,EAAG,IACb,CAAErB,EAAG,IAAKqB,EAAG,IACb,CAAErB,EAAG,IAAKqB,EAAG,IACb,CAAErB,EAAG,IAAKqB,EAAG,IACb,CAAErB,EAAG,IAAKqB,EAAG,MAIV,SAASC,IACd,OAAO,kBAACC,EAAA,EAAD,CAAUC,KAAMhB,EAAUS,KAAME,I,YCtBlC,SAASM,EAAUC,GACxB,OACE,kBAACC,EAAA,EAAD,CAAOC,KAAK,KAAKC,UAAQ,EAACC,OAAK,EAACC,QAAQ,QACtC,+BACGL,EAAMT,KAAKe,KAAI,SAACC,GAAD,OACd,4BACE,wBAAIC,MAAM,OAAOC,MAAM,SACrB,6BAAMC,KAAKC,UAAUJ,EAAG,KAAM,WCiD7BK,MAtDf,WACE,IADa,EAUWC,mBATM,CAC5B,CACEC,QAAS,8BACTzB,KAAM,eACN0B,SAAU,0BACVC,SAAU,YACVC,UAAW,iBAPF,mBAUN1B,EAVM,KAUA2B,EAVA,KA2Bb,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SAEzC,kBAAC1B,EAAD,MAEA,kBAAC2B,EAAA,EAAD,CACElB,QAAQ,SACRc,UAAS,UAAKK,IAAOC,OAAZ,QACTC,QAzBR,YHrBK,WAAP,gCGsBIC,GACGC,MAAK,SAACrC,GAAD,OAAU2B,EAAQ,CAAC,CAAEW,SAAUtC,EAAKsC,eACzCC,OAAM,SAACC,GAAD,OAAWb,EAAQ,CAAC,CAAEa,gBAmB3B,WAOA,kBAACR,EAAA,EAAD,CACEJ,UAAS,UAAKK,IAAOC,OAAZ,QACTpB,QAAQ,SACRqB,QA1BR,YHvBK,WAAP,gCGwBIM,GACGJ,MAAK,SAACrC,GACL0C,QAAQC,IAAI,kBAAmB3C,GAC/B2B,EAAQ3B,MAETuC,OAAM,SAACC,GAAD,OAAWb,EAAQ,CAAC,CAAEa,gBAiB3B,YAOA,kBAAChC,EAAD,CAAWR,KAAMA,OC7CL4C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnB,MAAK,SAAAoB,GACJA,EAAaC,gBAEdnB,OAAM,SAAAC,GACLE,QAAQF,MAAMA,EAAMmB,a,mBExI5BC,EAAOC,QAAU,CAAC,OAAS,sB,mBCD3BD,EAAOC,QAAU,IAA0B,kC","file":"static/js/main.f42c3a02.chunk.js","sourcesContent":["export async function getEnv() {\n  return getByAPI(\"env\");\n}\n\nexport async function getSeattle911() {\n  return getByAPI(\"seattle911\");\n}\n\nasync function getByAPI(api = \"\") {\n  const response = await fetch(`/api/${api}`, {\n    headers: { Accept: \"application-json\" },\n  });\n\n  return response.json();\n}\n","import React from \"react\";\nimport { VegaLite } from \"react-vega\";\n\nconst vegaSpec = {\n  width: 200,\n  height: 50,\n  mark: \"circle\",\n  encoding: {\n    x: { field: \"a\", type: \"ordinal\" },\n    y: { field: \"b\", type: \"quantitative\" },\n  },\n  data: { name: \"table\" },\n};\n\nconst vegaData = {\n  table: [\n    { a: \"A\", b: 28 },\n    { a: \"B\", b: 55 },\n    { a: \"C\", b: 43 },\n    { a: \"D\", b: 91 },\n    { a: \"E\", b: 81 },\n    { a: \"F\", b: 53 },\n    { a: \"G\", b: 19 },\n    { a: \"H\", b: 87 },\n    { a: \"I\", b: 52 },\n  ],\n};\n\nexport function Chart() {\n  return <VegaLite spec={vegaSpec} data={vegaData}></VegaLite>;\n}\n","import React from \"react\";\nimport Table from \"react-bootstrap/Table\";\n\ntype Props = {\n  data: object[];\n};\n\nexport function DataTable(props: Props) {\n  return (\n    <Table size=\"sm\" bordered hover variant=\"dark\">\n      <tbody>\n        {props.data.map((d) => (\n          <tr>\n            <td align=\"left\" color=\"white\">\n              <pre>{JSON.stringify(d, null, 2)}</pre>\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </Table>\n  );\n}\n","import React, { useState } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Button from \"react-bootstrap/Button\";\nimport styles from \"./app.module.css\";\nimport { getEnv, getSeattle911 } from \"./logic\";\nimport { Chart } from \"./Chart\";\nimport { DataTable } from \"./DataTable\";\n\nfunction App() {\n  const initialData: object[] = [\n    {\n      address: \"15TH AV E / E REPUBLICAN ST\",\n      type: \"Aid Response\",\n      datetime: \"2019-11-23T15:41:00.000\",\n      latitude: \"47.623102\",\n      longitude: \"-122.312631\",\n    },\n  ];\n  const [data, setData] = useState(initialData);\n\n  function updateEnv() {\n    getEnv()\n      .then((data) => setData([{ NODE_ENV: data.NODE_ENV }]))\n      .catch((error) => setData([{ error }]));\n  }\n\n  function updateData() {\n    getSeattle911()\n      .then((data) => {\n        console.log(\"Data from API: \", data);\n        setData(data);\n      })\n      .catch((error) => setData([{ error }]));\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n\n        <Chart></Chart>\n\n        <Button\n          variant=\"danger\"\n          className={`${styles.button} m-2`}\n          onClick={updateEnv}\n        >\n          Get env\n        </Button>\n        <Button\n          className={`${styles.button} m-2`}\n          variant=\"danger\"\n          onClick={updateData}\n        >\n          Get data\n        </Button>\n        <DataTable data={data}></DataTable>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./custom.scss\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"app_button__1epl4\"};","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}